// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using Watermark.Models;
using Watermark.Models.Products;
using Watermark.Models.Products.Contracts;
using Watermark.Repository;

namespace Watermark.Migrations
{
    [DbContext(typeof(WatermarkDbContext))]
    [Migration("20180205201000_LanguageConfig")]
    partial class LanguageConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Watermark.Models.Admin.Configuration.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CurrencyConfigurationId");

                    b.Property<int?>("LanguageConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyConfigurationId");

                    b.HasIndex("LanguageConfigurationId");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Watermark.Models.Admin.Configuration.CurrencyConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GlobalCurrency");

                    b.HasKey("Id");

                    b.ToTable("CurrencyConfiguration");
                });

            modelBuilder.Entity("Watermark.Models.Admin.Configuration.LanguageConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DefaultLanguage");

                    b.HasKey("Id");

                    b.ToTable("LanguageConfiguration");
                });

            modelBuilder.Entity("Watermark.Models.Admin.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateRead");

                    b.Property<bool>("Read");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Watermark.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsFirstLogin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Watermark.Models.Lifetime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("End");

                    b.Property<DateTime?>("Start");

                    b.HasKey("Id");

                    b.ToTable("Lifetime");
                });

            modelBuilder.Entity("Watermark.Models.PriceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IncludesTax");

                    b.Property<int?>("TaxRateId");

                    b.HasKey("Id");

                    b.HasIndex("TaxRateId");

                    b.ToTable("PriceDetail");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PriceDetail");
                });

            modelBuilder.Entity("Watermark.Models.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int?>("LifetimeId");

                    b.Property<int?>("PriceInformationId");

                    b.Property<int?>("ProductNameId");

                    b.Property<int?>("ProductSKUId");

                    b.Property<int>("ProductType");

                    b.Property<int?>("SearchEngineOptimisationOptionsId");

                    b.Property<int?>("StockLevelsId");

                    b.Property<int?>("TemplateId");

                    b.Property<bool>("TemporaryWithLifetime");

                    b.HasKey("Id");

                    b.HasIndex("LifetimeId");

                    b.HasIndex("PriceInformationId");

                    b.HasIndex("ProductNameId");

                    b.HasIndex("ProductSKUId");

                    b.HasIndex("SearchEngineOptimisationOptionsId");

                    b.HasIndex("StockLevelsId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ParentId");

                    b.Property<int?>("ProductCategoryId");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductConfiguration");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductDeliveryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDeliveryOption");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<int>("Language");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDescription");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Base64Contents");

                    b.Property<int>("FileType");

                    b.Property<bool>("Hide");

                    b.Property<string>("MediaDescription");

                    b.Property<int>("Order");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ProductName");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BasePriceId");

                    b.Property<bool>("DisplayManufacturerRRP");

                    b.Property<decimal>("ManufacturerRRP");

                    b.Property<int?>("SpecialPriceId");

                    b.HasKey("Id");

                    b.HasIndex("BasePriceId");

                    b.HasIndex("SpecialPriceId");

                    b.ToTable("ProductPricing");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<int>("ProductId");

                    b.Property<int>("Rating");

                    b.Property<int>("ReviewerId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductSearchEngineOptimisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("ProductSearchEngineOptimisation");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductSettingOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<string>("Setting");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSettingOverride");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductSKU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SKU")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ProductSKU");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductStockLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("LowStockNotification");

                    b.Property<int>("LowStockThreshold");

                    b.Property<int>("MaxCountInCart");

                    b.Property<int>("NotifyAtStockLevel");

                    b.Property<int>("OutOfStockThreshold");

                    b.Property<int>("StockLevel");

                    b.HasKey("Id");

                    b.ToTable("ProductStockLevel");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("Watermark.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("SiteConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SiteConfigurationId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Watermark.Models.TaxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("WholeNumberTaxRate");

                    b.HasKey("Id");

                    b.ToTable("TaxRate");
                });

            modelBuilder.Entity("Watermark.Models.Products.SpecialPriceDetail", b =>
                {
                    b.HasBaseType("Watermark.Models.PriceDetail");

                    b.Property<bool>("DisplayBasePrice");

                    b.Property<bool>("DisplayEndDateAlert");

                    b.Property<DateTimeOffset?>("SpecialPriceBeginningDate");

                    b.Property<DateTimeOffset?>("SpecialPriceEndDate");

                    b.ToTable("SpecialPriceDetail");

                    b.HasDiscriminator().HasValue("SpecialPriceDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Watermark.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Watermark.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watermark.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Watermark.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watermark.Models.Admin.Configuration.Configuration", b =>
                {
                    b.HasOne("Watermark.Models.Admin.Configuration.CurrencyConfiguration", "CurrencyConfiguration")
                        .WithMany()
                        .HasForeignKey("CurrencyConfigurationId");

                    b.HasOne("Watermark.Models.Admin.Configuration.LanguageConfiguration", "LanguageConfiguration")
                        .WithMany()
                        .HasForeignKey("LanguageConfigurationId");
                });

            modelBuilder.Entity("Watermark.Models.PriceDetail", b =>
                {
                    b.HasOne("Watermark.Models.TaxRate", "TaxRate")
                        .WithMany()
                        .HasForeignKey("TaxRateId");
                });

            modelBuilder.Entity("Watermark.Models.Products.Product", b =>
                {
                    b.HasOne("Watermark.Models.Lifetime", "Lifetime")
                        .WithMany()
                        .HasForeignKey("LifetimeId");

                    b.HasOne("Watermark.Models.Products.ProductPricing", "PriceInformation")
                        .WithMany()
                        .HasForeignKey("PriceInformationId");

                    b.HasOne("Watermark.Models.Products.ProductName", "ProductName")
                        .WithMany()
                        .HasForeignKey("ProductNameId");

                    b.HasOne("Watermark.Models.Products.ProductSKU", "ProductSKU")
                        .WithMany()
                        .HasForeignKey("ProductSKUId");

                    b.HasOne("Watermark.Models.Products.ProductSearchEngineOptimisation", "SearchEngineOptimisationOptions")
                        .WithMany()
                        .HasForeignKey("SearchEngineOptimisationOptionsId");

                    b.HasOne("Watermark.Models.Products.ProductStockLevel", "StockLevels")
                        .WithMany()
                        .HasForeignKey("StockLevelsId");

                    b.HasOne("Watermark.Models.Products.ProductTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductAttribute", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductCategory", b =>
                {
                    b.HasOne("Watermark.Models.Products.ProductCategory")
                        .WithMany("Children")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductConfiguration", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("Configurations")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductDeliveryOption", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("DeliveryOptions")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductDescription", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("Descriptions")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductMedia", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("ProductMedia")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductPricing", b =>
                {
                    b.HasOne("Watermark.Models.PriceDetail", "BasePrice")
                        .WithMany()
                        .HasForeignKey("BasePriceId");

                    b.HasOne("Watermark.Models.Products.SpecialPriceDetail", "SpecialPrice")
                        .WithMany()
                        .HasForeignKey("SpecialPriceId");
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductReview", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watermark.Models.Products.ProductSettingOverride", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("SettingOverrides")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watermark.Models.Site", b =>
                {
                    b.HasOne("Watermark.Models.Products.Product")
                        .WithMany("Sites")
                        .HasForeignKey("ProductId");

                    b.HasOne("Watermark.Models.Admin.Configuration.Configuration", "SiteConfiguration")
                        .WithMany()
                        .HasForeignKey("SiteConfigurationId");
                });
#pragma warning restore 612, 618
        }
    }
}
